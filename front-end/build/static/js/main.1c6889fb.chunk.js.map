{"version":3,"sources":["components/Table.js","components/Pagination.jsx","components/Filters.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Table","data","setSortBy","thead","map","title","onClick","tbody","in_frame","out_frame","content","value","join","labels","location","Pagination","currentPage","prevPage","nextPage","selectPage","pagesList","list","lastInList","length","unshift","className","page","Filters","setFilter","onChange","option","App","useState","sortBy","order","filterLocation","pageNumber","pageSize","lastPage","state","setState","useEffect","axios","get","params","then","res","event","target","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c6889fb.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport default function Table ({ data, setSortBy }) {\n  const columns = [\n    'in_frame',\n    'out_frame',\n    'value',\n    'labels',\n    'location',\n  ];\n\n  const thead = (\n    <thead>\n      <tr>\n        {\n          columns.map((title) => {\n            if (title === 'in_frame' || title === 'out_frame') {\n              return <th onClick={() => setSortBy(title)}>{title}</th>\n            }\n\n            return <th>{title}</th>\n          })\n        }\n      </tr>\n    </thead>\n  );\n\n  const tbody = (\n    <tbody>\n        {data && data.map(({\n          in_frame,\n          out_frame,\n          content,\n        }) => (\n          <tr>\n            <td>{in_frame}</td>\n            <td>{out_frame}</td>\n            <td>\n              {content.value.join(', ')}\n            </td>\n            <td>\n              {content.labels.join(', ')}\n            </td>\n            <td>\n              {content.location.join(', ')}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n  );\n\n  return (\n    <table>\n      <caption>Graphics Markup Data</caption>\n      {thead}\n      {data && tbody}\n    </table>\n  );\n}\n","import React from 'react';\n\n\nexport default function Pagination ({\n  currentPage,\n  prevPage,\n  nextPage,\n  selectPage,\n}) {\n  const pagesList = (() => {\n    const list = [];\n\n    let lastInList = 5;\n    while (currentPage > lastInList) lastInList += 5;\n\n    while (list.length < 5) list.unshift(lastInList--);\n\n    return list;\n  })();\n\n  return (\n    <div className=\"pagination-container\">\n      <div\n        className=\"page-item\"\n        onClick={prevPage}\n      >\n        {'<'}\n      </div>\n        {\n          pagesList.map((page) => (\n            <div\n              className={page === currentPage ? \"current-page\" : \"page-item\"}\n              onClick={() => selectPage(page)}\n            >\n              {page}\n            </div>\n          ))\n        }\n      <div\n        className=\"page-item\"\n        onClick={nextPage}\n      >\n        {'>'}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\n\nexport default function Filters ({ setFilter }) {\n  const locationOptions = [\n    'Upper',\n    'Upper Left',\n    'Upper Right',\n    'Lower',\n    'Lower Left',\n    'Lower Right',\n    'Centre',\n  ];\n\n  return (\n    <div className='filter-container'>\n      <label>Filter by location </label>\n      <select onChange={setFilter}>\n      <option value=\"\"> - </option>\n        {\n          locationOptions.map((option) => (\n            <option value={option}>{option}</option>\n          ))\n        }\n      </select>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Table from './components/Table';\nimport Pagination from './components/Pagination';\nimport Filters from './components/Filters';\n\nimport './App.css';\n\n\nfunction App() {\n  const [ state, setState ] = useState({\n    sortBy: 'in_frame',\n    order: 'asc',\n    filterLocation: '',\n    pageNumber: 1,\n    pageSize: 10,\n    lastPage: 0,\n  });\n  \n  useEffect (() => {\n    const {\n      sortBy,\n      order,\n      filterLocation,\n      pageNumber,\n      pageSize,\n    } = state;\n\n    axios.get('/data', {\n      params: {\n        sortBy,\n        order,\n        filterLocation,\n        pageNumber,\n        pageSize,\n      },\n    })\n      .then((res) => {\n        const { data, lastPage } = res.data;\n\n        setState({\n          ...state,\n          data,\n          lastPage,\n        });\n      });\n  }, [\n    state.sortBy,\n    state.order,\n    state.filterLocation,\n    state.pageNumber,\n    state.pageSize\n  ]);\n\n  const setSortBy = (sortBy) => {\n    setState({\n      ...state,\n      sortBy,\n      order: state.order === 'asc' ? 'desc' : 'asc', \n    });\n  }\n\n  const nextPage = () => {\n    if (state.pageNumber + 1 < state.lastPage) {\n      setState({\n        ...state,\n        pageNumber: state.pageNumber + 1,\n      });\n    }\n  }\n\n  const prevPage = () => {\n    if (state.pageNumber - 1 >= 1) {\n      setState({\n        ...state,\n        pageNumber: state.pageNumber - 1,\n      });\n    }\n  }\n\n  const selectPage = (pageNumber) => {\n    setState({\n      ...state,\n      pageNumber,\n    })\n  }\n\n  const setFilter = (event) => {\n    setState({\n      ...state,\n      filterLocation: event.target.value,\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Filters setFilter={setFilter}/>\n      <Table data={state.data} setSortBy={setSortBy} />\n      <Pagination\n        currentPage={state.pageNumber}\n        nextPage={nextPage}\n        prevPage={prevPage}\n        selectPage={selectPage}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}